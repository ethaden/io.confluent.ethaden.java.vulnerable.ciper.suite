/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.ethaden.java.vulnerable.ciper.suite;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.apache.hc.client5.http.auth.AuthCache;
import org.apache.hc.client5.http.auth.AuthScope;
import org.apache.hc.client5.http.auth.CredentialsProvider;
import org.apache.hc.client5.http.auth.UsernamePasswordCredentials;
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.auth.BasicAuthCache;
import org.apache.hc.client5.http.impl.auth.BasicCredentialsProvider;
import org.apache.hc.client5.http.impl.auth.BasicScheme;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.protocol.HttpClientContext;
import org.apache.hc.core5.http.ClassicHttpRequest;
import org.apache.hc.core5.http.ClassicHttpResponse;
import org.apache.hc.core5.http.Header;
import org.apache.hc.core5.http.HttpHost;
import org.apache.hc.core5.http.io.HttpClientResponseHandler;

public class App {
    private String api_key;
    private String api_secret;
    private String hostname;
    private String cluster_id;

    public App(Properties properties) {
        this.api_key = (String)properties.getProperty("API_KEY");
        this.api_secret = (String)properties.getProperty("API_SECRET");
        this.hostname = (String)properties.getProperty("HOSTNAME");
        this.cluster_id = (String)properties.getProperty("CLUSTER_ID");
        System.out.println(api_key+" : "+api_secret);
        System.out.println(hostname);
        System.out.println(cluster_id);
    }
    public String getGreeting() {
        return "Hello World!";
    }

    public void printTopics() throws IOException, URISyntaxException {
        URI uri = new URI("https://"+hostname+"/kafka/v3/clusters/" +cluster_id+ "/topics");
        //System.out.println(uri);
        final HttpHost targetHost = new HttpHost("https", hostname, 443);
        final BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();
        //AuthScope authScope = new AuthScope(targetHost);
        AuthScope authScope = new AuthScope(uri.getHost(), uri.getPort());
        credsProvider.setCredentials(authScope, new UsernamePasswordCredentials(api_key, api_secret.toCharArray()));

        // Create AuthCache instance
        final AuthCache authCache = new BasicAuthCache();
        // Generate BASIC scheme object and add it to the local auth cache
        authCache.put(targetHost, new BasicScheme());

        // Add AuthCache to the execution context
        final HttpClientContext context = HttpClientContext.create();
        context.setCredentialsProvider(credsProvider);
        context.setAuthCache(authCache);

        try (CloseableHttpClient client = HttpClients.custom()
                .setDefaultCredentialsProvider(credsProvider)
                .build()) {
            final HttpGet request = new HttpGet("https://"+hostname+"/kafka/v3/clusters/" +cluster_id+ "/topics");
            System.out.println(request);
            ClassicHttpResponse result = (ClassicHttpResponse) client.execute(targetHost, request, context, response -> {
                return response;
                });
/*             ClassicHttpResponse result = (ClassicHttpResponse) client.execute(targetHost, request, context, response -> {
                return response;
                });*/
                System.out.println(result);
                Header[] headers = result.getHeaders();
                for (Header header: headers) {
                    System.out.println(header);
                }
        }
    }

    public static void main(String[] args) throws IOException, URISyntaxException {
        if (args.length!=1) {
            System.out.println("Usage: java xy.jar <properties.file!>");
            System.exit(1);;
        }
        Properties properties = new Properties();
        properties.load(new FileInputStream(args[0]));
        new App(properties).printTopics();
    }
}
