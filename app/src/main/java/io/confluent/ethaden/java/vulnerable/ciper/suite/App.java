/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.ethaden.java.vulnerable.ciper.suite;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.apache.hc.client5.http.auth.AuthCache;
import org.apache.hc.client5.http.auth.AuthScope;
import org.apache.hc.client5.http.auth.Credentials;
import org.apache.hc.client5.http.auth.CredentialsProvider;
import org.apache.hc.client5.http.auth.UsernamePasswordCredentials;
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.auth.BasicAuthCache;
import org.apache.hc.client5.http.impl.auth.BasicCredentialsProvider;
import org.apache.hc.client5.http.impl.auth.BasicScheme;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.protocol.HttpClientContext;
import org.apache.hc.core5.http.ClassicHttpRequest;
import org.apache.hc.core5.http.ClassicHttpResponse;
import org.apache.hc.core5.http.Header;
import org.apache.hc.core5.http.HttpEntity;
import org.apache.hc.core5.http.HttpHost;
import org.apache.hc.core5.http.ParseException;
import org.apache.hc.core5.http.io.HttpClientResponseHandler;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.protocol.BasicHttpContext;

public class App {
    private String api_key;
    private String api_secret;
    private String hostname;
    private String cluster_id;

    public App(Properties properties) {
        this.api_key = (String)properties.getProperty("API_KEY");
        this.api_secret = (String)properties.getProperty("API_SECRET");
        this.hostname = (String)properties.getProperty("HOSTNAME");
        this.cluster_id = (String)properties.getProperty("CLUSTER_ID");
    }

    public void printTopics() throws IOException, URISyntaxException, ParseException {
        URI uri = new URI("https://"+hostname+"/kafka/v3/clusters/" +cluster_id+ "/topics");
        final HttpHost targetHost = new HttpHost("https", hostname, 443);
        final BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();
        AuthScope authScope = new AuthScope(uri.getHost(), -1);
        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(api_key, api_secret.toCharArray());
        credsProvider.setCredentials(authScope, credentials);

        final BasicScheme basicAuth = new BasicScheme();
        basicAuth.initPreemptive(credentials);

        final HttpClientContext context = HttpClientContext.create();
        context.setCredentialsProvider(credsProvider);
        context.resetAuthExchange(targetHost, basicAuth);

        HttpGet request = new HttpGet("https://"+hostname+"/kafka/v3/clusters/" +cluster_id+ "/topics");
        try (CloseableHttpClient client = HttpClientBuilder.create().build()) {
            client.execute(targetHost, request, context, response -> {
                System.out.println(response);
                HttpEntity entity = response.getEntity();
                if (entity != null) {
                    // return it as a String
                    String result = EntityUtils.toString(entity);
                    System.out.println(result);
                }
                return response;
            });
        }
    }

    public static void main(String[] args) throws IOException, URISyntaxException, ParseException {
        if (args.length!=1) {
            System.out.println("Usage: java xy.jar <properties.file!>");
            System.exit(1);;
        }
        Properties properties = new Properties();
        properties.load(new FileInputStream(args[0]));
        new App(properties).printTopics();
    }
}
